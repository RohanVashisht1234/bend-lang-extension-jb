// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Bend.flex

package com.rohanvashisht.bend.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.rohanvashisht.bend.language.psi.BendTypes.*;


public class _BendLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;
  public static final int OPTIONS_GHC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\2\u0100\1\u0200\34\u0100\1\u0300\1\u0400\1\u0500\265\u0100"+
    "\10\u0600\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\5\0\1\1\3\0\1\1\1\2\2\1\1\3\22\0"+
    "\1\4\1\5\1\6\1\7\2\5\1\10\1\11\1\12"+
    "\1\13\1\5\1\14\1\15\1\16\1\17\1\5\1\20"+
    "\4\21\3\22\2\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\43\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\44\1\60\1\61\1\44\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\101\1\110\1\111\1\112\1\113\1\114"+
    "\1\115\1\116\1\117\1\101\1\120\1\121\1\122\1\123"+
    "\6\0\1\124\32\0\1\1\u01cf\0\220\125\50\0\2\124"+
    "\u0166\0\u0170\125\u0100\124";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1792];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\4\1\12\1\4\1\13\2\14"+
    "\1\15\1\16\1\4\1\17\1\4\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\20\25\1\27\1\30\1\31"+
    "\1\32\6\33\1\34\1\35\1\33\2\36\1\37\1\36"+
    "\1\40\1\41\2\0\1\42\1\0\2\6\1\0\20\6"+
    "\1\43\1\0\1\15\3\0\1\44\3\0\1\15\1\45"+
    "\1\46\1\47\1\25\3\0\1\50\15\25\1\51\11\25"+
    "\1\52\1\53\1\54\1\55\1\56\3\0\1\34\1\57"+
    "\1\42\1\36\1\0\2\36\1\60\1\0\2\42\1\6"+
    "\1\0\1\61\1\43\20\0\27\6\1\62\20\0\1\60"+
    "\1\63\1\64\6\25\1\65\1\66\14\25\1\67\1\25"+
    "\1\70\1\42\1\71\1\62\17\36\1\0\1\72\13\0"+
    "\1\72\12\0\22\6\15\0\2\25\1\73\2\25\1\74"+
    "\2\25\1\75\5\25\1\76\3\25\15\36\1\0\1\72"+
    "\11\0\1\72\7\0\1\72\13\6\1\25\1\77\1\100"+
    "\6\25\1\101\1\25\1\102\1\25\1\103\6\0\1\72"+
    "\4\0\10\6\1\104\1\25\1\105\1\25\1\106\1\107"+
    "\1\110\1\25\1\111\4\0\1\72\3\0\2\6\1\25"+
    "\1\112\1\25\1\0\1\72\1\6\1\113\1\114\1\72"+
    "\1\0\1\72\1\0\1\72\1\0\2\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u01ae"+
    "\0\u025a\0\u02b0\0\u0306\0\u035c\0\u03b2\0\u0408\0\u01ae\0\u01ae"+
    "\0\u045e\0\u01ae\0\u04b4\0\u01ae\0\u050a\0\u0560\0\u05b6\0\u01ae"+
    "\0\u060c\0\u0662\0\u06b8\0\u0306\0\u070e\0\u0764\0\u0306\0\u01ae"+
    "\0\u07ba\0\u01ae\0\u0810\0\u0866\0\u08bc\0\u0912\0\u0968\0\u09be"+
    "\0\u0a14\0\u0a6a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\u0c18\0\u0c6e"+
    "\0\u0cc4\0\u0d1a\0\u0d70\0\u0306\0\u01ae\0\u0306\0\u01ae\0\u0dc6"+
    "\0\u0e1c\0\u0e72\0\u0ec8\0\u0f1e\0\u0f74\0\u01ae\0\u0fca\0\u1020"+
    "\0\u1076\0\u10cc\0\u1122\0\u1020\0\u01ae\0\u1178\0\u035c\0\u01ae"+
    "\0\u11ce\0\u1224\0\u127a\0\u12d0\0\u1326\0\u137c\0\u13d2\0\u1428"+
    "\0\u147e\0\u14d4\0\u152a\0\u1580\0\u15d6\0\u162c\0\u1682\0\u16d8"+
    "\0\u172e\0\u1784\0\u17da\0\u1830\0\u1224\0\u1886\0\u18dc\0\u1932"+
    "\0\u1988\0\u19de\0\u0306\0\u1a34\0\u1a8a\0\u1ae0\0\u1b36\0\u1b36"+
    "\0\u0306\0\u0306\0\u1b8c\0\u0764\0\u1be2\0\u1c38\0\u1be2\0\u01ae"+
    "\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90\0\u1de6\0\u1e3c\0\u1e92\0\u1ee8"+
    "\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u0a6a\0\u2096\0\u20ec\0\u2142"+
    "\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c\0\u01ae"+
    "\0\u01ae\0\u01ae\0\u01ae\0\u0f74\0\u23f2\0\u2448\0\u23f2\0\u01ae"+
    "\0\u1020\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c\0\u264c"+
    "\0\u035c\0\u26a2\0\u26f8\0\u274e\0\u274e\0\u27a4\0\u27fa\0\u2850"+
    "\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe\0\u2a54\0\u2aaa\0\u2b00"+
    "\0\u2b56\0\u2bac\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a\0\u2db0"+
    "\0\u2e06\0\u2e5c\0\u2eb2\0\u2f08\0\u2f5e\0\u2fb4\0\u300a\0\u3060"+
    "\0\u30b6\0\u310c\0\u3162\0\u31b8\0\u320e\0\u3264\0\u32ba\0\u3310"+
    "\0\u3366\0\u33bc\0\u3412\0\u3468\0\u01ae\0\u34be\0\u3514\0\u356a"+
    "\0\u35c0\0\u3616\0\u366c\0\u36c2\0\u3718\0\u376e\0\u37c4\0\u381a"+
    "\0\u3870\0\u38c6\0\u391c\0\u3972\0\u39c8\0\u39c8\0\u1a8a\0\u1ae0"+
    "\0\u3a1e\0\u3a74\0\u3aca\0\u3b20\0\u3b76\0\u3bcc\0\u0a6a\0\u0a6a"+
    "\0\u3c22\0\u3c78\0\u3cce\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c"+
    "\0\u3ed2\0\u3f28\0\u3f7e\0\u3fd4\0\u0a6a\0\u402a\0\u01ae\0\u1076"+
    "\0\u01ae\0\u1020\0\u4080\0\u40d6\0\u412c\0\u4182\0\u41d8\0\u422e"+
    "\0\u4284\0\u42da\0\u4330\0\u4386\0\u43dc\0\u4432\0\u4488\0\u44de"+
    "\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c\0\u46e2\0\u4738\0\u478e"+
    "\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c\0\u4992\0\u49e8\0\u4a3e"+
    "\0\u4a94\0\u4aea\0\u4b40\0\u4b96\0\u4bec\0\u4c42\0\u4c98\0\u4cee"+
    "\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u4e9c\0\u4ef2\0\u4f48\0\u4f9e"+
    "\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c\0\u51a2\0\u51f8\0\u524e"+
    "\0\u52a4\0\u52fa\0\u5350\0\u53a6\0\u53fc\0\u5452\0\u54a8\0\u54fe"+
    "\0\u5554\0\u55aa\0\u5600\0\u5656\0\u56ac\0\u5702\0\u5758\0\u57ae"+
    "\0\u5804\0\u585a\0\u0a6a\0\u58b0\0\u5906\0\u0a6a\0\u595c\0\u59b2"+
    "\0\u0a6a\0\u5a08\0\u5a5e\0\u5ab4\0\u5b0a\0\u5b60\0\u0a6a\0\u5bb6"+
    "\0\u5c0c\0\u5c62\0\u5cb8\0\u5d0e\0\u5d64\0\u5dba\0\u5e10\0\u5e66"+
    "\0\u5ebc\0\u5f12\0\u5f68\0\u5fbe\0\u6014\0\u606a\0\u60c0\0\u6116"+
    "\0\u616c\0\u61c2\0\u6218\0\u626e\0\u62c4\0\u631a\0\u6370\0\u63c6"+
    "\0\u641c\0\u6472\0\u64c8\0\u651e\0\u6574\0\u65ca\0\u6620\0\u6676"+
    "\0\u66cc\0\u6722\0\u6778\0\u67ce\0\u6824\0\u687a\0\u68d0\0\u6926"+
    "\0\u697c\0\u69d2\0\u6a28\0\u6a7e\0\u6ad4\0\u6b2a\0\u6b80\0\u0a6a"+
    "\0\u0a6a\0\u6bd6\0\u6c2c\0\u6c82\0\u6cd8\0\u6d2e\0\u6d84\0\u0a6a"+
    "\0\u6dda\0\u0a6a\0\u6e30\0\u0a6a\0\u6e86\0\u6edc\0\u6f32\0\u6f88"+
    "\0\u6fde\0\u7034\0\u708a\0\u70e0\0\u7136\0\u718c\0\u71e2\0\u7238"+
    "\0\u728e\0\u72e4\0\u733a\0\u7390\0\u73e6\0\u743c\0\u7492\0\u0a6a"+
    "\0\u74e8\0\u0a6a\0\u753e\0\u0a6a\0\u0a6a\0\u0a6a\0\u7594\0\u0a6a"+
    "\0\u75ea\0\u7640\0\u7696\0\u76ec\0\u7742\0\u7798\0\u77ee\0\u7844"+
    "\0\u789a\0\u78f0\0\u7946\0\u0a6a\0\u799c\0\u79f2\0\u7a48\0\u7a9e"+
    "\0\u0a6a\0\u0a6a\0\u7af4\0\u7b4a\0\u7ba0\0\u7bf6\0\u7c4c\0\u7ca2"+
    "\0\u45e0\0\u01ae";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\13\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\3\26\1\27\1\30\1\31\1\32\1\13\1\33"+
    "\1\34\27\35\1\36\1\37\1\40\1\13\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\2\52\1\54\1\55\1\56\1\52\1\57\1\60"+
    "\1\52\1\61\4\52\1\62\1\63\1\64\1\65\1\66"+
    "\2\6\3\67\1\70\12\67\1\71\101\67\1\72\3\67"+
    "\1\0\4\67\1\70\12\67\1\73\101\67\1\74\3\67"+
    "\1\0\4\67\1\70\56\67\1\75\1\67\1\76\34\67"+
    "\1\77\2\67\1\0\1\67\1\0\1\7\1\10\1\11"+
    "\1\7\1\100\1\101\1\102\1\100\1\103\3\100\1\104"+
    "\1\105\105\100\1\0\1\100\127\0\1\7\1\0\2\7"+
    "\122\0\1\7\1\10\2\7\122\0\1\7\1\0\2\7"+
    "\12\0\1\106\113\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\2\13\4\0\1\13\1\0\5\13\30\0\1\13"+
    "\1\0\1\13\33\0\1\13\1\0\1\13\2\0\2\107"+
    "\1\110\3\107\1\110\54\107\1\111\42\107\1\112\1\113"+
    "\1\0\1\114\1\113\63\112\1\115\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\112\1\124\2\112\1\125\1\126"+
    "\1\127\1\112\1\130\1\131\1\112\1\132\2\112\1\133"+
    "\1\112\1\134\1\112\1\135\4\112\2\136\1\0\6\136"+
    "\1\0\12\136\1\137\36\136\1\140\42\136\4\0\1\141"+
    "\1\13\1\0\2\13\3\0\1\13\1\0\2\13\4\26"+
    "\1\13\1\0\5\13\30\0\1\13\1\0\1\13\1\142"+
    "\32\0\1\13\1\0\1\13\6\0\1\141\1\13\1\0"+
    "\2\13\3\0\1\13\1\0\2\13\4\26\1\13\1\0"+
    "\2\13\1\143\2\13\30\0\1\13\1\0\1\13\1\142"+
    "\32\0\1\13\1\0\1\13\21\0\1\106\4\26\13\0"+
    "\1\144\11\0\1\145\6\0\1\146\5\0\1\142\5\0"+
    "\1\144\11\0\1\145\7\0\1\146\26\0\1\106\4\26"+
    "\13\0\1\144\26\0\1\142\5\0\1\144\36\0\1\147"+
    "\1\0\2\147\3\0\1\147\1\0\2\147\4\0\1\150"+
    "\1\0\5\147\30\0\1\147\1\0\1\147\33\0\1\147"+
    "\1\0\1\147\7\0\1\13\1\0\2\13\3\0\1\13"+
    "\1\0\1\151\1\13\4\0\1\13\1\0\5\13\30\0"+
    "\1\13\1\0\1\13\33\0\1\13\1\0\1\13\7\0"+
    "\1\13\1\0\2\13\3\0\1\13\1\0\2\13\4\0"+
    "\1\13\1\0\2\13\1\152\2\13\30\0\1\13\1\0"+
    "\1\13\33\0\1\13\1\0\1\13\7\0\1\13\1\0"+
    "\2\13\3\0\1\13\1\0\2\13\4\0\1\13\1\0"+
    "\5\13\30\0\1\13\1\0\1\13\1\153\1\0\30\153"+
    "\1\0\1\13\1\0\1\13\13\0\1\35\6\0\4\35"+
    "\7\0\27\35\4\0\1\35\1\0\30\35\7\0\1\154"+
    "\1\0\2\154\1\155\1\0\2\155\3\0\1\155\1\0"+
    "\1\155\1\154\6\0\5\155\27\156\1\0\1\155\1\0"+
    "\1\155\1\156\1\0\30\156\1\0\1\157\1\0\1\155"+
    "\11\0\1\160\1\0\1\52\6\0\4\161\7\0\27\52"+
    "\4\0\1\41\1\0\30\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\21\52"+
    "\1\162\6\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\20\52\1\163\7\52"+
    "\15\0\1\160\1\0\1\52\6\0\4\52\7\0\27\52"+
    "\4\0\1\52\1\0\1\164\12\52\1\165\2\52\1\166"+
    "\11\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\4\52\1\167\23\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\170\12\52\1\171\1\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\10\52\1\172\7\52\1\173\7\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\174\14\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\30\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\5\52\1\175\6\52\1\176"+
    "\13\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\1\177\27\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\1\200\27\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\16\52\1\201"+
    "\11\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\1\202\27\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\1\203\3\52\1\204\23\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\20\52\1\205\7\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\10\52\1\206"+
    "\17\52\24\0\1\207\111\0\1\67\245\0\1\210\21\0"+
    "\1\211\231\0\1\212\21\0\1\213\110\0\1\214\1\0"+
    "\2\214\1\215\1\0\2\215\3\0\1\215\1\0\1\215"+
    "\1\214\6\0\5\215\27\216\1\0\1\215\1\0\1\215"+
    "\1\216\1\0\30\216\1\0\1\217\1\0\1\215\66\0"+
    "\1\220\46\0\2\100\1\0\6\100\1\0\105\100\1\0"+
    "\1\100\2\107\1\110\2\107\1\101\1\221\1\107\6\101"+
    "\1\107\44\101\1\222\40\101\1\107\1\101\16\0\1\223"+
    "\107\0\2\136\1\0\2\136\2\224\1\136\1\224\1\100"+
    "\4\224\1\136\44\224\1\225\40\224\1\136\1\224\20\0"+
    "\4\226\42\0\1\106\37\0\1\107\1\227\1\230\2\227"+
    "\1\107\1\231\54\107\1\111\42\107\2\112\2\0\123\112"+
    "\1\232\1\0\1\233\1\232\60\112\1\234\2\112\1\115"+
    "\1\116\1\117\1\120\1\121\1\122\1\123\1\112\1\124"+
    "\2\112\1\125\1\126\1\127\1\112\1\130\1\131\1\112"+
    "\1\132\2\112\1\133\1\112\1\134\1\112\1\235\4\112"+
    "\1\0\1\233\1\0\2\233\60\0\1\234\2\0\1\236"+
    "\1\237\1\240\1\241\1\242\1\243\1\244\1\0\1\245"+
    "\2\0\1\246\1\247\1\250\1\0\1\251\1\252\1\0"+
    "\1\253\2\0\1\254\1\0\1\255\1\0\1\235\4\0"+
    "\2\112\2\0\105\112\1\256\16\112\2\0\104\112\1\257"+
    "\17\112\2\0\64\112\1\260\12\112\1\130\2\112\1\261"+
    "\21\112\2\0\70\112\1\262\33\112\2\0\77\112\1\263"+
    "\12\112\1\264\11\112\2\0\74\112\1\265\5\112\1\266"+
    "\1\112\1\267\17\112\2\0\77\112\1\270\24\112\2\0"+
    "\71\112\1\256\6\112\1\271\1\272\22\112\2\0\64\112"+
    "\1\273\37\112\2\0\64\112\1\274\37\112\2\0\102\112"+
    "\1\275\21\112\2\0\64\112\1\276\37\112\2\0\64\112"+
    "\1\277\3\112\1\300\33\112\2\0\104\112\1\301\17\112"+
    "\2\0\73\112\1\302\1\303\27\112\2\0\74\112\1\304"+
    "\25\112\11\0\1\305\121\0\1\147\1\0\2\147\1\305"+
    "\2\0\1\147\1\0\2\147\4\0\1\147\1\0\5\147"+
    "\30\0\1\147\1\0\1\147\33\0\1\147\1\0\1\147"+
    "\10\0\1\136\1\0\2\136\6\0\4\306\7\0\1\307"+
    "\1\310\1\311\1\312\1\313\1\314\1\315\1\316\3\0"+
    "\1\317\1\0\1\320\2\0\1\315\1\321\1\0\1\315"+
    "\1\316\3\0\1\136\1\0\1\322\2\0\2\136\3\0"+
    "\1\136\7\0\1\136\1\323\1\0\1\136\1\0\1\136"+
    "\1\0\1\136\1\0\1\324\26\0\1\106\126\0\4\26"+
    "\42\0\1\142\53\0\1\325\1\0\1\325\1\0\4\326"+
    "\122\0\3\327\43\0\1\145\57\0\4\330\7\0\6\330"+
    "\25\0\1\146\1\0\6\330\35\0\1\147\1\0\2\147"+
    "\3\0\1\147\1\0\2\147\4\0\1\147\1\0\5\147"+
    "\30\0\1\147\1\0\1\147\33\0\1\147\1\0\1\147"+
    "\13\0\1\153\6\0\4\153\7\0\27\153\4\0\1\153"+
    "\1\0\30\153\7\0\1\154\1\0\2\154\1\155\1\0"+
    "\2\155\3\0\1\155\1\0\2\155\4\0\1\155\1\0"+
    "\5\155\27\156\1\0\1\155\1\0\1\155\1\156\1\0"+
    "\30\156\1\0\1\157\1\0\1\155\3\0\1\154\1\0"+
    "\2\154\1\155\1\0\2\155\1\156\2\0\1\155\1\0"+
    "\1\155\1\154\4\156\2\0\5\155\27\156\1\0\1\155"+
    "\1\0\1\155\1\156\1\0\30\156\1\0\1\157\1\0"+
    "\1\155\11\0\1\160\1\0\1\52\5\0\1\106\4\161"+
    "\7\0\4\52\1\331\22\52\4\0\1\41\1\0\4\52"+
    "\1\331\23\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\21\52\1\332\6\52"+
    "\15\0\1\160\1\0\1\52\6\0\4\52\7\0\27\52"+
    "\4\0\1\52\1\0\4\52\1\333\23\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\21\52\1\334\6\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\1\335"+
    "\27\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\15\52\1\336\12\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\5\52\1\337\5\52\1\340\14\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\21\52\1\341\6\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\2\52\1\342\25\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\15\52\1\343"+
    "\12\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\16\52\1\344\11\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\16\52\1\345\11\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\17\52\1\346\10\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\14\52\1\347"+
    "\13\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\22\52\1\350\5\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\15\52\1\351\12\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\21\52\1\352\6\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\10\52\1\353"+
    "\17\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\22\52\1\354\5\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\27\52\1\355\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\4\52"+
    "\1\356\23\52\15\0\1\357\117\0\1\214\1\0\2\214"+
    "\1\215\1\0\2\215\3\0\1\215\1\0\2\215\4\0"+
    "\1\215\1\0\5\215\27\216\1\0\1\215\1\0\1\215"+
    "\1\216\1\0\30\216\1\0\1\217\1\0\1\215\3\0"+
    "\1\214\1\0\2\214\1\215\1\0\2\215\1\216\2\0"+
    "\1\215\1\0\1\215\1\214\4\216\2\0\5\215\27\216"+
    "\1\0\1\215\1\0\1\215\1\216\1\0\30\216\1\0"+
    "\1\217\1\0\1\215\2\0\1\107\1\227\1\230\2\227"+
    "\1\101\1\360\1\107\6\101\1\107\44\101\1\222\40\101"+
    "\1\107\1\101\122\0\1\361\10\0\2\100\1\0\1\100"+
    "\1\362\4\100\1\0\105\100\1\0\1\100\5\0\1\100"+
    "\1\224\1\0\2\224\4\100\1\0\1\100\4\363\7\100"+
    "\1\364\1\365\1\366\1\367\1\370\1\371\1\372\1\373"+
    "\3\100\1\374\1\100\1\375\2\100\1\372\1\376\1\100"+
    "\1\372\1\373\3\100\1\224\1\100\1\377\2\100\2\224"+
    "\3\100\1\224\7\100\1\224\1\u0100\1\100\1\224\1\100"+
    "\1\224\1\100\1\224\1\100\1\u0101\5\100\1\0\1\100"+
    "\20\0\4\226\13\0\1\144\26\0\1\106\5\0\1\144"+
    "\31\0\1\107\1\227\1\230\2\227\1\107\1\110\54\107"+
    "\1\111\42\107\1\112\1\232\1\0\1\233\1\232\63\112"+
    "\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\112"+
    "\1\124\2\112\1\125\1\126\1\127\1\112\1\130\1\131"+
    "\1\112\1\132\2\112\1\133\1\112\1\134\6\112\1\0"+
    "\1\233\1\0\2\233\63\0\1\236\1\237\1\240\1\241"+
    "\1\242\1\243\1\244\1\0\1\245\2\0\1\246\1\247"+
    "\1\250\1\0\1\251\1\252\1\0\1\253\2\0\1\254"+
    "\1\0\1\255\6\0\2\234\2\u0102\122\234\111\0\1\u0103"+
    "\124\0\1\u0104\105\0\1\u0105\12\0\1\251\2\0\1\u0106"+
    "\113\0\1\u0107\134\0\1\u0108\12\0\1\u0109\107\0\1\u010a"+
    "\5\0\1\u010b\1\0\1\u010c\120\0\1\u010d\117\0\1\u0103"+
    "\6\0\1\u010e\1\u010f\110\0\1\u0110\125\0\1\u0111\143\0"+
    "\1\u0112\107\0\1\u0113\125\0\1\u0114\3\0\1\u0115\141\0"+
    "\1\u0116\114\0\1\u0117\1\u0118\125\0\1\u0119\25\0\2\256"+
    "\2\0\57\256\1\u011a\42\256\2\112\2\0\70\112\1\u011b"+
    "\33\112\2\0\105\112\1\u011c\16\112\2\0\101\112\1\u011d"+
    "\22\112\2\0\71\112\1\256\5\112\1\256\24\112\2\0"+
    "\74\112\1\u011e\10\112\1\u011c\16\112\2\0\66\112\1\u011f"+
    "\35\112\2\0\101\112\1\u0120\22\112\2\0\104\112\1\256"+
    "\17\112\2\0\102\112\1\u0121\21\112\2\0\102\112\1\u0122"+
    "\21\112\2\0\103\112\1\u0123\16\112\2\256\2\0\57\256"+
    "\1\u011a\6\256\1\u0124\33\256\2\112\2\0\100\112\1\u0125"+
    "\23\112\2\0\106\112\1\u0126\15\112\2\0\101\112\1\u0127"+
    "\22\112\2\0\105\112\1\115\16\112\2\0\74\112\1\260"+
    "\27\112\2\0\106\112\1\u0128\15\112\2\0\113\112\1\256"+
    "\10\112\2\0\74\112\1\u0129\27\112\2\0\106\112\1\u012a"+
    "\15\112\2\0\70\112\1\u012b\31\112\11\0\1\305\6\0"+
    "\4\306\137\0\1\u012c\127\0\1\u012d\14\0\1\136\104\0"+
    "\1\u012e\17\0\1\136\107\0\1\u012f\1\0\1\u012d\6\0"+
    "\1\u0130\126\0\1\136\1\u0131\1\316\2\0\1\u0132\1\u0133"+
    "\110\0\1\136\13\0\1\136\125\0\1\136\126\0\1\136"+
    "\110\0\1\136\120\0\1\u012c\22\0\1\u012d\112\0\1\136"+
    "\5\0\1\u0134\3\0\1\u0135\1\u0136\2\0\1\u012e\76\0"+
    "\35\136\57\0\3\u0137\123\0\4\u0138\7\0\6\u0138\27\0"+
    "\6\u0138\50\0\4\326\111\0\1\160\1\0\1\52\2\0"+
    "\1\325\1\0\1\325\1\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\30\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\4\52\1\u0139"+
    "\23\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\1\u013a\27\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\4\52\1\u013b\23\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\21\52"+
    "\1\u013c\6\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\22\52\1\u013d\5\52"+
    "\15\0\1\160\1\0\1\52\6\0\4\52\7\0\27\52"+
    "\4\0\1\52\1\0\4\52\1\u013e\23\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\4\52\1\u013f\23\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\1\u0140"+
    "\27\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\14\52\1\u0141\13\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\1\52\1\u0142\26\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\16\52\1\u0143\11\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\1\52\1\u0144"+
    "\26\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\2\52\1\u0145\25\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\u0146\14\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\21\52\1\u0147\6\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\21\52\1\u0148"+
    "\6\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\23\52\1\u0149\4\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\u014a\14\52\13\0\2\100\1\0"+
    "\1\100\1\362\4\100\1\0\1\100\4\363\100\100\1\0"+
    "\1\100\5\0\2\100\1\0\6\100\1\0\16\100\1\u014b"+
    "\66\100\1\0\1\100\5\0\2\100\1\0\6\100\1\0"+
    "\20\100\1\u014c\14\100\1\224\47\100\1\0\1\100\5\0"+
    "\2\100\1\0\6\100\1\0\14\100\1\u014d\17\100\1\224"+
    "\50\100\1\0\1\100\5\0\2\100\1\0\6\100\1\0"+
    "\16\100\1\u014e\1\100\1\u014c\6\100\1\u014f\55\100\1\0"+
    "\1\100\5\0\2\100\1\0\6\100\1\0\30\100\1\224"+
    "\1\u0150\1\373\2\100\1\u0151\1\u0152\46\100\1\0\1\100"+
    "\5\0\2\100\1\0\6\100\1\0\21\100\1\224\13\100"+
    "\1\224\47\100\1\0\1\100\5\0\2\100\1\0\6\100"+
    "\1\0\35\100\1\224\47\100\1\0\1\100\5\0\2\100"+
    "\1\0\6\100\1\0\36\100\1\224\46\100\1\0\1\100"+
    "\5\0\2\100\1\0\6\100\1\0\21\100\1\224\63\100"+
    "\1\0\1\100\5\0\2\100\1\0\6\100\1\0\14\100"+
    "\1\u014b\22\100\1\u014c\45\100\1\0\1\100\5\0\2\100"+
    "\1\0\6\100\1\0\24\100\1\224\5\100\1\u0153\3\100"+
    "\1\u0154\1\u0155\2\100\1\u014d\42\100\1\0\1\100\5\0"+
    "\2\100\1\0\6\100\1\0\13\100\35\224\35\100\1\0"+
    "\1\100\5\0\2\100\1\0\6\100\1\0\1\100\3\u0156"+
    "\101\100\1\0\1\100\5\0\2\100\1\0\6\100\1\0"+
    "\1\100\4\u0157\7\100\6\u0157\27\100\6\u0157\26\100\1\0"+
    "\1\100\1\0\1\u0158\2\u0102\1\u0158\2\0\1\234\116\0"+
    "\2\u0103\2\0\57\u0103\1\u0159\42\u0103\74\0\1\u015a\142\0"+
    "\1\u015b\121\0\1\u015c\115\0\1\u0103\5\0\1\u0103\122\0"+
    "\1\u015d\10\0\1\u015b\106\0\1\u015e\140\0\1\u015f\130\0"+
    "\1\u0103\123\0\1\u0160\125\0\1\u0161\126\0\1\u0162\16\0"+
    "\2\u0103\2\0\57\u0103\1\u0159\6\u0103\1\u0163\33\u0103\104\0"+
    "\1\u0164\133\0\1\u0165\120\0\1\u0166\131\0\1\236\114\0"+
    "\1\u0105\137\0\1\u0167\132\0\1\u0103\106\0\1\u0168\137\0"+
    "\1\u0169\107\0\1\u016a\31\0\2\256\1\u0103\1\u016b\57\256"+
    "\1\u011a\42\256\2\112\2\0\64\112\1\u016c\37\112\2\0"+
    "\70\112\1\256\33\112\2\0\106\112\1\u016d\15\112\2\0"+
    "\71\112\1\256\32\112\2\0\70\112\1\u016e\33\112\2\0"+
    "\64\112\1\u016f\37\112\2\0\100\112\1\256\23\112\2\0"+
    "\65\112\1\u0170\36\112\2\0\102\112\1\u0171\17\112\2\256"+
    "\2\0\57\256\1\u011a\17\256\1\u0172\22\256\2\112\2\0"+
    "\65\112\1\u0173\36\112\2\0\66\112\1\u012a\35\112\2\0"+
    "\77\112\1\u0174\24\112\2\0\107\112\1\u0175\14\112\2\0"+
    "\77\112\1\u011c\24\112\2\0\73\112\1\256\30\112\2\0"+
    "\77\112\1\u0176\22\112\45\0\1\136\126\0\1\136\127\0"+
    "\1\136\76\0\1\136\143\0\1\136\140\0\1\136\110\0"+
    "\1\136\124\0\1\136\23\0\1\136\56\0\1\305\30\0"+
    "\1\136\143\0\1\136\101\0\1\136\102\0\1\305\6\0"+
    "\3\u0137\114\0\1\305\6\0\4\u0138\7\0\6\u0138\27\0"+
    "\6\u0138\37\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\20\52\1\u0177\7\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\12\52\1\u0178\15\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\21\52\1\u0179\6\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\10\52\1\u017a"+
    "\17\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\17\52\1\u017b\10\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\u017c\14\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\1\u017d\27\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\20\52\1\u017e\7\52"+
    "\15\0\1\160\1\0\1\52\6\0\4\52\7\0\27\52"+
    "\4\0\1\52\1\0\3\52\1\u017f\24\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\7\52\1\u0180\20\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\16\52"+
    "\1\u0181\11\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\4\52\1\u0182\23\52"+
    "\15\0\1\160\1\0\1\52\6\0\4\52\7\0\27\52"+
    "\4\0\1\52\1\0\20\52\1\u0183\7\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\3\52\1\u0184\24\52\13\0\2\100\1\0\6\100"+
    "\1\0\26\100\1\224\56\100\1\0\1\100\5\0\2\100"+
    "\1\0\6\100\1\0\27\100\1\224\55\100\1\0\1\100"+
    "\5\0\2\100\1\0\6\100\1\0\31\100\1\224\53\100"+
    "\1\0\1\100\5\0\2\100\1\0\6\100\1\0\2\100"+
    "\1\224\102\100\1\0\1\100\5\0\2\100\1\0\6\100"+
    "\1\0\20\100\1\224\64\100\1\0\1\100\5\0\2\100"+
    "\1\0\6\100\1\0\33\100\1\224\51\100\1\0\1\100"+
    "\5\0\2\100\1\0\6\100\1\0\16\100\1\224\66\100"+
    "\1\0\1\100\5\0\2\100\1\0\6\100\1\0\15\100"+
    "\1\224\23\100\1\224\43\100\1\0\1\100\5\0\2\100"+
    "\1\0\1\100\1\362\4\100\1\0\23\100\1\224\61\100"+
    "\1\0\1\100\5\0\2\100\1\0\6\100\1\0\41\100"+
    "\1\224\43\100\1\0\1\100\5\0\2\100\1\0\6\100"+
    "\1\0\15\100\1\224\67\100\1\0\1\100\5\0\2\100"+
    "\1\0\1\100\1\362\4\100\1\0\1\100\3\u0156\101\100"+
    "\1\0\1\100\5\0\2\100\1\0\1\100\1\362\4\100"+
    "\1\0\1\100\4\u0157\7\100\6\u0157\27\100\6\u0157\26\100"+
    "\1\0\1\100\1\0\1\u0158\1\0\2\u0158\2\0\1\234"+
    "\116\0\3\u0103\1\u016b\57\u0103\1\u0159\42\u0103\70\0\1\u0185"+
    "\131\0\1\u0103\143\0\1\u0186\110\0\1\u0103\124\0\1\u0187"+
    "\121\0\1\u0188\141\0\1\u0103\112\0\1\u0189\142\0\1\u018a"+
    "\17\0\2\u0103\2\0\57\u0103\1\u0159\17\u0103\1\u018b\22\u0103"+
    "\71\0\1\u018c\126\0\1\u0169\136\0\1\u018d\135\0\1\u018e"+
    "\115\0\1\u015b\121\0\1\u0103\131\0\1\u018f\22\0\3\u0103"+
    "\1\0\57\u0103\1\u0159\42\u0103\2\112\2\0\76\112\1\256"+
    "\25\112\2\0\74\112\1\u0190\27\112\2\0\103\112\1\u0191"+
    "\20\112\2\0\77\112\1\u0192\24\112\2\0\64\112\1\u0193"+
    "\37\112\2\0\104\112\1\u0191\15\112\2\256\2\0\57\256"+
    "\1\u011a\27\256\1\u0194\12\256\2\112\2\0\67\112\1\u0195"+
    "\34\112\2\0\102\112\1\u0196\21\112\2\0\104\112\1\u0197"+
    "\17\112\2\0\67\112\1\256\32\112\7\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\22\52\1\u0198\5\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\15\52\1\u0199"+
    "\12\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\22\52\1\u019a\5\52\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\13\52\1\u019b\14\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\13\52\1\u019c\14\52\15\0\1\160\1\0\1\52\6\0"+
    "\4\52\7\0\27\52\4\0\1\52\1\0\22\52\1\u019d"+
    "\5\52\15\0\1\160\1\0\1\52\6\0\4\52\7\0"+
    "\27\52\4\0\1\52\1\0\1\u019e\27\52\15\0\1\160"+
    "\1\0\1\52\6\0\4\52\7\0\27\52\4\0\1\52"+
    "\1\0\2\52\1\u019f\25\52\15\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\15\52"+
    "\1\u01a0\12\52\110\0\1\u0103\123\0\1\u01a1\134\0\1\u01a2"+
    "\121\0\1\u01a3\112\0\1\u01a4\145\0\1\u01a2\15\0\2\u0103"+
    "\2\0\57\u0103\1\u0159\27\u0103\1\u01a5\12\u0103\73\0\1\u01a6"+
    "\140\0\1\u01a7\127\0\1\u01a8\110\0\1\u0103\32\0\2\112"+
    "\2\0\101\112\1\u01a9\22\112\2\0\106\112\1\256\15\112"+
    "\2\0\77\112\1\301\24\112\2\0\77\112\1\256\22\112"+
    "\2\256\2\0\57\256\1\u011a\7\256\1\u01aa\32\256\2\112"+
    "\2\0\64\112\1\256\37\112\2\0\66\112\1\u0170\35\112"+
    "\2\0\101\112\1\256\20\112\7\0\1\160\1\0\1\52"+
    "\6\0\4\52\7\0\27\52\4\0\1\52\1\0\23\52"+
    "\1\u01ab\4\52\15\0\1\160\1\0\1\52\6\0\4\52"+
    "\7\0\27\52\4\0\1\52\1\0\27\52\1\u01ac\15\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\1\u01ad\27\52\113\0\1\u01ae\132\0\1\u0103"+
    "\116\0\1\u0116\125\0\1\u0103\22\0\2\u0103\2\0\57\u0103"+
    "\1\u0159\7\u0103\1\u01af\32\u0103\70\0\1\u0103\127\0\1\u0189"+
    "\140\0\1\u0103\20\0\2\112\2\0\107\112\1\u011c\12\112"+
    "\2\256\2\0\57\256\1\u011a\10\256\1\u01b0\31\256\7\0"+
    "\1\160\1\0\1\52\6\0\4\52\7\0\27\52\4\0"+
    "\1\52\1\0\4\52\1\u01b1\23\52\15\0\1\160\1\0"+
    "\1\52\6\0\4\52\7\0\27\52\4\0\1\52\1\0"+
    "\13\52\1\u01b2\14\52\121\0\1\u015b\12\0\2\u0103\2\0"+
    "\57\u0103\1\u0159\10\u0103\1\u01b3\31\u0103\1\256\1\u01b0\1\0"+
    "\1\u01b4\1\u01b0\56\256\1\u011a\42\256\1\u0103\1\u01b3\1\0"+
    "\1\u01b4\1\u01b3\1\u0103\1\u01b5\54\u0103\1\u0159\42\u0103\1\0"+
    "\1\u01b4\1\0\2\u01b4\1\0\1\u01b6\117\0\2\u0103\2\0"+
    "\13\u0103\5\u01b7\7\u0103\27\u01b7\1\u0103\1\u0159\2\u0103\1\u01b7"+
    "\1\u0103\30\u01b7\6\u0103\17\0\5\u01b8\7\0\27\u01b8\4\0"+
    "\1\u01b8\1\0\30\u01b8\6\0\2\u0103\2\0\2\u0103\1\u01b9"+
    "\10\u0103\5\u01b7\7\u0103\27\u01b7\1\u0103\1\u0159\2\u0103\1\u01b7"+
    "\1\u0103\30\u01b7\6\u0103\6\0\1\u01ba\10\0\5\u01b8\7\0"+
    "\27\u01b8\4\0\1\u01b8\1\0\30\u01b8\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[31992];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\6\1\2\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\1\11\1\1\1\11"+
    "\22\1\1\11\1\1\1\11\6\1\1\11\6\1\1\11"+
    "\2\0\1\11\1\0\2\1\1\0\21\1\1\0\1\1"+
    "\3\0\1\1\3\0\5\1\3\0\1\1\1\11\27\1"+
    "\4\11\3\0\1\1\1\11\2\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\20\0\27\1\1\11\20\0\31\1"+
    "\1\11\1\1\1\11\20\1\1\0\1\1\13\0\1\1"+
    "\12\0\22\1\15\0\37\1\1\0\1\1\11\0\1\1"+
    "\7\0\32\1\6\0\1\1\4\0\21\1\4\0\1\1"+
    "\3\0\5\1\1\0\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[442];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;




  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")


  /* user code: */
  public _BendLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _BendLexer(java.io.Reader in) {
  }


  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case NCOMMENT: {
              yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return BEND_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 443: break;
            case NHADDOCK: {
              yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return BEND_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 444: break;
            case QQ: {
              yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return BEND_NOT_TERMINATED_QQ_EXPRESSION;
            }  // fall though
            case 445: break;
            case OPTIONS_GHC: {
              yybegin(YYINITIAL);
        return com.intellij.psi.TokenType.BAD_CHARACTER;
            }  // fall though
            case 446: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          // fall through
          case 78: break;
          case 2:
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          // fall through
          case 79: break;
          case 3:
            { return BEND_NEWLINE;
            }
          // fall through
          case 80: break;
          case 4:
            { return BEND_VARSYM_ID;
            }
          // fall through
          case 81: break;
          case 5:
            { return BEND_DOUBLE_QUOTES;
            }
          // fall through
          case 82: break;
          case 6:
            { return BEND_COMMENT;
            }
          // fall through
          case 83: break;
          case 7:
            { return BEND_QUOTE;
            }
          // fall through
          case 84: break;
          case 8:
            { return BEND_LEFT_PAREN;
            }
          // fall through
          case 85: break;
          case 9:
            { return BEND_RIGHT_PAREN;
            }
          // fall through
          case 86: break;
          case 10:
            { return BEND_COMMA;
            }
          // fall through
          case 87: break;
          case 11:
            { return BEND_DOT;
            }
          // fall through
          case 88: break;
          case 12:
            { return BEND_DECIMAL;
            }
          // fall through
          case 89: break;
          case 13:
            { return BEND_CONSYM_ID;
            }
          // fall through
          case 90: break;
          case 14:
            { return BEND_SEMICOLON;
            }
          // fall through
          case 91: break;
          case 15:
            { return BEND_EQUAL;
            }
          // fall through
          case 92: break;
          case 16:
            { return BEND_AT;
            }
          // fall through
          case 93: break;
          case 17:
            { return BEND_CON_ID;
            }
          // fall through
          case 94: break;
          case 18:
            { return BEND_LEFT_BRACKET;
            }
          // fall through
          case 95: break;
          case 19:
            { return BEND_BACKSLASH;
            }
          // fall through
          case 96: break;
          case 20:
            { return BEND_RIGHT_BRACKET;
            }
          // fall through
          case 97: break;
          case 21:
            { return BEND_VAR_ID;
            }
          // fall through
          case 98: break;
          case 22:
            { return BEND_BACKQUOTE;
            }
          // fall through
          case 99: break;
          case 23:
            { return BEND_LEFT_BRACE;
            }
          // fall through
          case 100: break;
          case 24:
            { return BEND_VERTICAL_BAR;
            }
          // fall through
          case 101: break;
          case 25:
            { return BEND_RIGHT_BRACE;
            }
          // fall through
          case 102: break;
          case 26:
            { return BEND_TILDE;
            }
          // fall through
          case 103: break;
          case 27:
            { 
            }
          // fall through
          case 104: break;
          case 28:
            { qqDepth++;
            }
          // fall through
          case 105: break;
          case 29:
            { if (qqDepth > 0) {
            qqDepth--;
        } else {
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return BEND_LIST_COMPREHENSION;
        }
            }
          // fall through
          case 106: break;
          case 30:
            { return BEND_ONE_PRAGMA;
            }
          // fall through
          case 107: break;
          case 31:
            { return BEND_HASH;
            }
          // fall through
          case 108: break;
          case 32:
            { return BEND_PRAGMA_SEP;
            }
          // fall through
          case 109: break;
          case 33:
            { return BEND_DASH;
            }
          // fall through
          case 110: break;
          case 34:
            { return BEND_STRING_LITERAL;
            }
          // fall through
          case 111: break;
          case 35:
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          // fall through
          case 112: break;
          case 36:
            { return BEND_RIGHT_ARROW;
            }
          // fall through
          case 113: break;
          case 37:
            { return BEND_COLON_COLON;
            }
          // fall through
          case 114: break;
          case 38:
            { return BEND_LEFT_ARROW;
            }
          // fall through
          case 115: break;
          case 39:
            { return BEND_DOUBLE_RIGHT_ARROW;
            }
          // fall through
          case 116: break;
          case 40:
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          // fall through
          case 117: break;
          case 41:
            { return BEND_IF;
            }
          // fall through
          case 118: break;
          case 42:
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          // fall through
          case 119: break;
          case 43:
            { if (commentDepth > 0) {
            commentDepth--;
        } else {
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return BEND_NCOMMENT;
        }
            }
          // fall through
          case 120: break;
          case 44:
            { commentDepth++;
            }
          // fall through
          case 121: break;
          case 45:
            { if (haddockDepth > 0) {
            haddockDepth--;
        } else {
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return BEND_NHADDOCK;
        }
            }
          // fall through
          case 122: break;
          case 46:
            { haddockDepth++;
            }
          // fall through
          case 123: break;
          case 47:
            { if (qqDepth > 0) {
            qqDepth--;
        } else {
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return BEND_QUASIQUOTE;
        }
            }
          // fall through
          case 124: break;
          case 48:
            { return BEND_FLOAT;
            }
          // fall through
          case 125: break;
          case 49:
            { return BEND_HADDOCK;
            }
          // fall through
          case 126: break;
          case 50:
            { return BEND_CHARACTER_LITERAL;
            }
          // fall through
          case 127: break;
          case 51:
            { return BEND_OCTAL;
            }
          // fall through
          case 128: break;
          case 52:
            { return BEND_HEXADECIMAL;
            }
          // fall through
          case 129: break;
          case 53:
            { return BEND_DEF;
            }
          // fall through
          case 130: break;
          case 54:
            { return BEND_DEL;
            }
          // fall through
          case 131: break;
          case 55:
            { return BEND_TRY;
            }
          // fall through
          case 132: break;
          case 56:
            { yybegin(OPTIONS_GHC);
    return BEND_PRAGMA_START;
            }
          // fall through
          case 133: break;
          case 57:
            { yybegin(YYINITIAL);
        return BEND_PRAGMA_END;
            }
          // fall through
          case 134: break;
          case 58:
            { return BEND_DIRECTIVE;
            }
          // fall through
          case 135: break;
          case 59:
            { return BEND_CASE;
            }
          // fall through
          case 136: break;
          case 60:
            { return BEND_ELSE;
            }
          // fall through
          case 137: break;
          case 61:
            { return BEND_FROM;
            }
          // fall through
          case 138: break;
          case 62:
            { return BEND_PASS;
            }
          // fall through
          case 139: break;
          case 63:
            { return BEND_BREAK;
            }
          // fall through
          case 140: break;
          case 64:
            { return BEND_CLASS;
            }
          // fall through
          case 141: break;
          case 65:
            { return BEND_MATCH;
            }
          // fall through
          case 142: break;
          case 66:
            { return BEND_RAISE;
            }
          // fall through
          case 143: break;
          case 67:
            { return BEND_YIELD;
            }
          // fall through
          case 144: break;
          case 68:
            { return BEND_ASSERT;
            }
          // fall through
          case 145: break;
          case 69:
            { return BEND_EXCEPT;
            }
          // fall through
          case 146: break;
          case 70:
            { return BEND_GLOBAL;
            }
          // fall through
          case 147: break;
          case 71:
            { return BEND_IMPORT;
            }
          // fall through
          case 148: break;
          case 72:
            { return BEND_LAMBDA;
            }
          // fall through
          case 149: break;
          case 73:
            { return BEND_RETURN;
            }
          // fall through
          case 150: break;
          case 74:
            { return BEND_FINALLY;
            }
          // fall through
          case 151: break;
          case 75:
            { return BEND_CONTINUE;
            }
          // fall through
          case 152: break;
          case 76:
            { return BEND_NONLOCAL;
            }
          // fall through
          case 153: break;
          case 77:
            { return BEND_INCLUDE_DIRECTIVE;
            }
          // fall through
          case 154: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
